AWSTemplateFormatVersion: 2010-09-09

Parameters:
  # CIDR of VPC
  NetworkCIDR:
    Description: CIDR of the new VPC
    Type: String
    Default: 10.0.0.0/16
    
  # AZ Name where subnet will be created
  AvailabilityZoneName:
    Description: CIDR of the new VPC
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-south-1a
    
  SubnetCIDR:
    Description: CIDR of the new subnet within this VPC
    Type: String
    Default: 10.0.1.0/24

  KeyPairName:
    Description: ec2 key
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: narotam
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro  
    
Resources:
  # create VPC
  aimdekVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref NetworkCIDR
      InstanceTenancy: default
      Tags: 
       - Key: Name
         Value: aimdek-vpc
  
  # create Internet Gateway
  aimdekIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
       - Key: Name
         Value: aimdek-igw          
  
  # attaching the IGW to my VPC
  vpcToIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref aimdekVPC
      InternetGatewayId: !Ref aimdekIGW

  # create a custom route table for aimdek vpc
  aimdekRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref aimdekVPC
      Tags: 
       - Key: Name
         Value: aimdek-public-route-table
  
  # Add routes entries for public network through igw
  aimdekRoutes:
    Type: AWS::EC2::Route    
    Properties:
      RouteTableId: !Ref aimdekRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref aimdekIGW      
  
  # NACL
  aimdekPublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref aimdekVPC
      Tags:
        - Key: Name
          Value: aimdek-vpc-nacl       
          
  # Allow Incoming TCP traffic
  aimdekNaclRulesForInboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref aimdekPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0  # any ip address
      PortRange:
        From: '0'
        To: '65535'
          
  # Allow Outgoing TCP traffic
  aimdekNaclRulesForOutboundTCP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref aimdekPublicNACL
      RuleNumber: '100'
      Protocol: '6'  # tcp
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
                
  # creating a public subnet
  aimdekPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref aimdekVPC
      AvailabilityZone: !Ref AvailabilityZoneName
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: 
          !Join 
          - ''
          - - 'public-subnet-'
            - !Ref AvailabilityZoneName
  
  # asscoiate subnet with our route table else by default it is asscoiated with main route table
  aimdekSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref aimdekPublicSubnet
      RouteTableId: !Ref aimdekRouteTable
      
  # associate subnet with NACL else by default it is asscoiated with main NACLs
  aimdekSubnetNaclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref aimdekPublicSubnet
      NetworkAclId: !Ref aimdekPublicNACL

  EC2SecurityGroup:
    #security groups for the EC2.
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable jenkins port(8080) & ssh(22) access
      GroupName: Jenkins-ec2-sg
      VpcId: 
        !Ref aimdekVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0  
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '50000'
          ToPort: '50000'
          CidrIp: 0.0.0.0/0     
      Tags: 
       - Key: Name
         Value: aimdek-sg

  TASKSecurityGroup:
  #security groups for each of the EC2.
  Type: AWS::EC2::SecurityGroup
  Properties: 
    GroupDescription: Enble Ecs task agent port(8080)
    GroupName: Jenkins-agent-sg
    VpcId: 
      !Ref aimdekVPC
    SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0     
  
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      # - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      # - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
      Path: "/"

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref Ec2InstanceRole
      InstanceProfileName: Ec2InstanceProfile 


  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-03f4878755434977f'  # Use a valid AMI ID for your region
      SubnetId: !Ref aimdekPublicSubnet
      KeyName: 'narotam'
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: Aimdek-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1      

# output key resources ids and export the values for cross-stack referencing
Outputs:
  VpcID:
    Description: ID of the newly created VPC
    Value: !Ref aimdekVPC
    
  PublicSubnetID:
    Description: SubnetId of the public subnet
    Value: !Ref aimdekPublicSubnet 

  InstanceId:
    Description: Public IP address of the first created EC2 instance
    Value: !Ref EC2Instance

  PublicIpAddress:
    Value: !GetAtt EC2Instance.PublicIp  
      